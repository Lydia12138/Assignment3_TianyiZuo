install.packages("dplyr")
install.packages("tidyr")
getwd()
getwd()
getwd()
getwd()
library(dplyr)
getwd()
read.csv("/Users/MAmingrui/Desktop/BIol343/Assignment 1 /Data/DecodonAsexualitydata .csv")
Data<-read.csv("/Users/MAmingrui/Desktop/BIol343/Assignment 1 /Data/DecodonAsexualitydata .csv")
class(Data)
dim(Data)
View(Data)
str(Data)
head(Data)
tail(Data)
source("~/Desktop/BIol343/Assignment 1 /Assignment script.R")
library(dplyr)
Data<-read.csv("/Users/MAmingrui/Desktop/BIol343/Assignment 1 /Data/DecodonAsexualitydata .csv")
class(Data)
dim(Data)
str(Data)
head(Data)
tail(Data)
View(Data)
Data<-mutate(Data, Ovary.Area..mm.= Ovary.Width..mm. * Ovary.Height..mm.)
head(Data)
grp<-group_by(data,Ovary.Area..mm)
grp<-group_by(Data,Ovary.Area..mm)
grp<-group_by(Data,Ovary.Area..mm.)
View(grp)
grp<-group_by(Data,Ovary.Area..mm.)
summarize(grp, Minimum = min(Ovary.Area..mm.), Maximum = max(Ovary.Area..mm.),
Mean = mean(Ovary.Area..mm.), Median = median(Ovary.Area..mm.),
SD = sd(Ovary.Area..mm.))
summarize(Data, Minimum = min(Ovary.Area..mm.), Maximum = max(Ovary.Area..mm.),
Mean = mean(Ovary.Area..mm.), Median = median(Ovary.Area..mm.),
SD = sd(Ovary.Area..mm.))
View(Data)
summarize(Data, Minimum = min(Flower.Number, na.rm=TRUE), Maximum = max(Flower.Number, na.rm=TRUE),
Mean = mean(Flower.Number, na.rm=TRUE), Median = median(Flower.Number, na.rm=TRUE),
SD = sd(Flower.Number, na.rm=TRUE))
Data %>%
group_by(Population.Type %>%
summarize( Mean = mean(Ovary.Area..mm.))
Data %>%
group_by(Population.Type)%>%
summarize( Mean = mean(Ovary.Area..mm.))
Grp<- group_by(Population.Type)
summarize(Grp,Mean = mean(Ovary.Area..mm.))
Grp<- group_by(Data, Population.Type)
summarize(Grp,Mean = mean(Ovary.Area..mm.))
Grp<- group_by(Data, Population.Type,)
summarize(Grp,OA_Mean = mean(Ovary.Area..mm.), FN_Mean = Mean = mean(Flower.Number, na.rm=TRUE),
T_Mean = mean(Average.August.Temperature...C.))
Grp<- group_by(Data, Population.Type,)
summarize(Grp,OA_Mean = mean(Ovary.Area..mm.), FN_Mean = Mean = mean(Flower.Number, na.rm=TRUE),
T_Mean = mean(Average.August.Temperature...C.))
Grp<- group_by(Data, Population.Type,)
summarize(Grp,OA_Mean = mean(Ovary.Area..mm.), FN_Mean = Mean = mean(Flower.Number, na.rm=TRUE),
T_Mean = mean(Average.August.Temperature...C.))
Grp<- group_by(Data, Population.Type,)
summarize(Grp,OA_Mean = mean(Ovary.Area..mm.), FN_Mean = Mean = mean(Flower.Number, na.rm=TRUE))
Grp<- group_by(Data, Population.Type)
summarize(Grp,OA_Mean = mean(Ovary.Area..mm.), FN_Mean = Mean = mean(Flower.Number, na.rm=TRUE))
summarize(Grp,OA_Mean = mean(Ovary.Area..mm.), FN_Mean= mean(Flower.Number, na.rm=TRUE),
T_Mean = mean(Average.August.Temperature))
summarize(Grp,OA_Mean = mean(Ovary.Area..mm.), FN_Mean= mean(Flower.Number, na.rm=TRUE),
T_Mean = mean(Average.August.Temperature...C.))
library(dplyr)
getwd()
getwd()
Data<-read.csv("/Users/MAmingrui/Desktop/BIol343/Assignment 1 /Data/DecodonAsexualitydata .csv")
read.csv("/Users/MAmingrui/Desktop/BIol343/Assignment 1 /Data/DecodonAsexualitydata .csv")
library(dplyr)
read.csv("/Users/MAmingrui/Desktop/BIol343/Assignment 1 /Data/DecodonAsexualitydata .csv")
Data<-read.csv("/Users/MAmingrui/Desktop/BIol343/Assignment 1 /Data/DecodonAsexualitydata .csv")
class(Data)
dim(Data)
class(Data)
dim(Data)
str(Data)
head(Data)
tail(Data)
NewData<-rename(Data,Ovary.Width..mm.= Ovary_Width, Ovary.Height..mm. = Ovary_Height, Flower.Number = Flower_Num,
Average.August.Temperature...C. = Aver_T )
NewData<-rename(Data, Ovary.Width..mm.= Ovary_Width, Ovary.Height..mm. = Ovary_Height, Flower.Number = Flower_Num,
Average.August.Temperature...C. = Aver_T )
NewData<-rename(Data, Ovary.Width..mm.= Ovary_Width)
Data<-read.csv("/Users/MAmingrui/Desktop/BIol343/Assignment 1 /Data/DecodonAsexualitydata .csv")
NewData<-rename(Data, Ovary.Width..mm.= Ovary_Width)
View(Data)
NewData<-rename(Data, Ovary_Width = Ovary.Width..mm.)
NewData
Data<-mutate(Data, Ovary_Area = Ovary.Width..mm. * Ovary.Height..mm.)
head(Data)
summarize(Data, Minimum = min(Ovary_Area), Maximum = max(Ovary_Area),
Mean = mean(Ovary_Area), Median = median(Ovary_Area),
SD = sd(Ovary_Area))
summarize(Data, Minimum = min(Flower.Number, na.rm=TRUE), Maximum = max(Flower.Number, na.rm=TRUE),
Mean = mean(Flower.Number, na.rm=TRUE), Median = median(Flower.Number, na.rm=TRUE),
SD = sd(Flower.Number, na.rm=TRUE))
library(dplyr)
library(dplyr)
read.csv("/Users/MAmingrui/Desktop/BIol343/Assignment 1 /Data/DecodonAsexualitydata .csv")
library(dplyr)
read.csv("/Users/MAmingrui/Desktop/BIol343/Assignment 1 /Data/DecodonAsexualitydata .csv")
Grp<- group_by(Data, Population.Type)
summarize(Grp,OA_Mean = mean(Ovary_Area), FN_Mean= mean(Flower.Number, na.rm=TRUE),
AT_Mean = mean(Average.August.Temperature...C.))
NewData %%
group_by(NewData, Population.Type) %%
summarize(Grp,OA_Mean = mean(Ovary_Area), FN_Mean= mean(Flower.Number, na.rm=TRUE),
AT_Mean = mean(Average.August.Temperature...C.))
NewData %>%
group_by(NewData, Population.Type) %>%
summarize(Grp,OA_Mean = mean(Ovary_Area), FN_Mean= mean(Flower.Number, na.rm=TRUE),
AT_Mean = mean(Average.August.Temperature...C.))
NewData %>%
group_by(NewData, Population.Type) %>%
summarize(OA_Mean = mean(Ovary_Area), FN_Mean= mean(Flower.Number, na.rm=TRUE),
AT_Mean = mean(Average.August.Temperature...C.))
NewData<-mutate(Data, Ovary_Area = Ovary.Width..mm. * Ovary.Height..mm.)
head(NewData)
summarize(NewData, Minimum = min(Ovary_Area), Maximum = max(Ovary_Area), Mean = mean(Ovary_Area), Median = median(Ovary_Area), SD = sd(Ovary_Area))
?abs
library(ggplot2)
MyData <- read.csv("~/Desktop/intro tutorial/week 2 / FallopiaData.csv")
MyData <- read.csv("~/Desktop/intro tutorial/week 2/ FallopiaData.csv")
MyData <- read.csv("/~/Desktop/intro tutorial/week 2/ FallopiaData.csv")
MyData <- read.csv("/Desktop/intro tutorial/week 2/ FallopiaData.csv")
MyData <- read.csv("Desktop/intro tutorial/week 2/ FallopiaData.csv")
getwd()
rnorm(10)
runif(10)
sample(c(1:5),100, replace = T)
library(ggplot2)
rnorm(10)
runif(10)
qplot(sample(c(1:5),100, replace = T))
library(ggplot2)
rnorm(10)
runif(10)
qplot(sample(c(1:5),100, replace = T))
library(ggplot2)
rnorm(10)
runif(10)
qplot(sample(c(1:5),100, replace = T))
install.packages("tidyverse")
install.packages("devtools")
abs(-10)
1==2
knitr::opts_chunk$set(echo = TRUE)
MyData<-read.csv("./InputData/FallopiaData.csv")#loading the data
str(MyData)#check the structure of the Data
head(MyData)
class(MyData)
dim(MyData)
tail(MyData)
summary(MyData)
NewData %>% group_by(Nutrients) %>%
summarise(Average = my_function(TotalG, "Average"))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)#package loading
MyData<-read.csv("./InputData/FallopiaData.csv")#loading the data
str(MyData)#check the structure of the Data
head(MyData)
class(MyData)
dim(MyData)
tail(MyData)
summary(MyData)
MyData %>%
filter(Total >= 60)
SubData <- select(MyData, Total, Taxon, Scenario, Nutrients)
head(SubData)
NewData <- transmute(SubData,TotalG = Total / 1000, Taxon, Scenario, Nutrients)
head(NewData)
my_function <- function(vec1, str1){
if (str1 == "Average"){
Average <- mean(vec1)
return(Average)
}else if (str1 == "Sum"){
Sum <- sum(vec1)
return(Sum)
}else if (str1 == "Observation"){
Count <- length(vec1)
return (Count)
}else {
cat("error")
}
}
cat("The total number of observations is", my_function(NewData$Taxon,"Observation"))
NewData %>% group_by(Nutrients) %>%
summarise(Average = my_function(TotalG, "Average"))
View(MyData)
MyData %>%
filter(Total >= 60)
SubData <- select(MyData, Total, Taxon, Scenario, Nutrients)
head(SubData)
SubData <- select(MyData, Total, Taxon, Scenario, Nutrients)
head(SubData)
SubData <- select(MyData, Total, Taxon, Scenario, Nutrients)
head(SubData)
MyData %>%
filter(Total >= 60)
head(MyData)
MyData %>%
filter(Total >= 60)%>%
select(Total, Taxon, Scenario, Nutrients)
head(MyData)
MyData <- MyData %>%
filter(Total >= 60)%>%
select(Total, Taxon, Scenario, Nutrients)
MyData <- MyData %>%
filter(Total >= 60)
SubData <- select(MyData, Total, Taxon, Scenario, Nutrients)
head(SubData)
NewData <- transmute(SubData,TotalG = Total / 1000, Taxon, Scenario, Nutrients)
head(NewData)
my_function <- function(vec1, str1){
if (str1 == "Average"){
Average <- mean(vec1)
return(Average)
}else if (str1 == "Sum"){
Sum <- sum(vec1)
return(Sum)
}else if (str1 == "Observation"){
Count <- length(vec1)
return (Count)
}else {
cat("error")
}
}
my_function <- function(vec1, str1){
if (str1 == "Average"){
Average <- mean(vec1)
return(Average)
}else if (str1 == "Sum"){
Sum <- sum(vec1)
return(Sum)
}else if (str1 == "Observation"){
Count <- length(vec1)
return (Count)
}else {
cat("Error! You can choose from Average/Sum/Observation.")
}
}
write.csv(NewData, "Output/WrangledData.csv", row.names = FALSE)
cat("The total number of observations is", my_function(NewData$Taxon,"Observation"))
NewData %>% group_by(Nutrients) %>%
summarise(Average_TotalG = my_function(TotalG, "Average"))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)#package loading
MyData<-read.csv("./InputData/FallopiaData.csv")#loading the data
str(MyData)#check the structure of the Data
head(MyData)
class(MyData)
dim(MyData)
tail(MyData)
summary(MyData)
MyData <- MyData %>%
filter(Total >= 60)
SubData <- select(MyData, Total, Taxon, Scenario, Nutrients)
head(SubData)
NewData <- transmute(SubData,TotalG = Total / 1000, Taxon, Scenario, Nutrients)
head(NewData)
my_function <- function(vec1, str1){
if (str1 == "Average"){
Average <- mean(vec1)
return(Average)
}else if (str1 == "Sum"){
Sum <- sum(vec1)
return(Sum)
}else if (str1 == "Observation"){
Count <- length(vec1)
return (Count)
}else {
cat("Error! You can choose from Average/Sum/Observation.")
}
}
cat("The total number of observations is", my_function(NewData$Taxon,"Observation"))
NewData %>% group_by(Nutrients) %>%
summarise(Average_TotalG = my_function(TotalG, "Average"))
write.csv(NewData, "Output/WrangledData.csv", row.names = FALSE)
Vector <- c(1,2,3,4,5,6,7,8,9,10)
my_function(Vector, "Average")
my_function(Vector, "Sum")
my_function(Vector, "Observation")
knitr::opts_chunk$set(echo = TRUE)
Vector <- c(1,2,3,4,5,6,7,8,9,10)
# here I used this vector to test my function.  The output should be average = 3, sum = 15, Observation = 5 for this test case x
my_function(Vector, "Average")
my_function(Vector, "Sum")
my_function(Vector, "Observation")
getwd
getwd()
